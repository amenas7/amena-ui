import { EventEmitter, ElementRef, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { IconDefinition } from '@fortawesome/fontawesome-svg-core';
import { TooltipPosition } from '../types/tooltip.types';
import * as i0 from "@angular/core";
export type ButtonVariant = 'primary' | 'secondary' | 'terciary' | 'danger' | 'danger-light' | 'warning' | 'info' | 'gray' | 'red' | 'success';
export type ButtonSize = 'sm' | 'md' | 'lg';
export type ButtonType = 'button' | 'submit' | 'reset';
export declare class SaButtonComponent implements OnInit, AfterViewInit {
    private cdr;
    isReady: boolean;
    constructor(cdr: ChangeDetectorRef);
    label: string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    get criticalInlineStyles(): string;
    private getVariantColors;
    private getSizePadding;
    private getFontSize;
    private _variant;
    private _size;
    private _disabled;
    private _loading;
    private _fullWidth;
    private _type;
    private _icon?;
    private _position;
    private _iconOnly;
    private _tooltip?;
    private _tooltipPosition;
    private _noAnimate;
    set tooltip(value: string | any);
    get tooltip(): string | undefined;
    set tooltipPosition(value: TooltipPosition | any);
    get tooltipPosition(): TooltipPosition;
    get isLongTooltip(): boolean;
    set variant(value: ButtonVariant | any);
    get variant(): ButtonVariant;
    set size(value: ButtonSize | any);
    get size(): ButtonSize;
    set disabled(value: boolean | any);
    get disabled(): boolean;
    set loading(value: boolean | any);
    get loading(): boolean;
    set fullWidth(value: boolean | any);
    get fullWidth(): boolean;
    set type(value: ButtonType | any);
    get type(): ButtonType;
    set icon(value: string | any);
    get icon(): string | undefined;
    set position(value: 'left' | 'right' | any);
    get position(): 'left' | 'right';
    set iconOnly(value: boolean | any);
    get iconOnly(): boolean;
    set noAnimate(value: boolean | any);
    get noAnimate(): boolean;
    buttonText: ElementRef;
    clicked: EventEmitter<void>;
    readonly spinnerIcon: IconDefinition;
    get iconDefinition(): IconDefinition | undefined;
    onClick(event?: Event): void;
    get buttonClasses(): string;
    get isInteractive(): boolean;
    get showSpinner(): boolean;
    get showContent(): boolean;
    private getSizeClass;
    static ɵfac: i0.ɵɵFactoryDeclaration<SaButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SaButtonComponent, "sa-button", never, { "label": { "alias": "label"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "tooltipPosition": { "alias": "tooltipPosition"; "required": false; }; "variant": { "alias": "variant"; "required": false; }; "size": { "alias": "size"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "loading": { "alias": "loading"; "required": false; }; "fullWidth": { "alias": "fullWidth"; "required": false; }; "type": { "alias": "type"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "position": { "alias": "position"; "required": false; }; "iconOnly": { "alias": "iconOnly"; "required": false; }; "noAnimate": { "alias": "noAnimate"; "required": false; }; }, { "clicked": "clicked"; }, never, never, false, never>;
}
