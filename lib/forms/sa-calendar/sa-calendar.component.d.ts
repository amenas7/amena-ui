import { EventEmitter, OnInit, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { CalendarSize, CalendarStatus, CalendarViewMode, CalendarDay, CalendarMonth, CalendarYear, CalendarEvent, CalendarColors, CalendarLocale, CalendarValidation, CalendarConfig, CalendarSelectEvent, CalendarViewChangeEvent } from '../../types/calendar.types';
import * as i0 from "@angular/core";
export declare class SaCalendarComponent implements ControlValueAccessor, OnInit, OnChanges {
    private cdr;
    private _value;
    size: CalendarSize;
    status: CalendarStatus;
    label: string;
    placeholder: string;
    helperText: string;
    errorText: string;
    required: boolean;
    readonly: boolean;
    disabled: boolean;
    minDate: Date | string | number | null;
    maxDate: Date | string | number | null;
    id: string;
    name: string;
    locale: CalendarLocale;
    colors: CalendarColors;
    config: CalendarConfig;
    validation: CalendarValidation;
    events: CalendarEvent[];
    inline: boolean;
    showInput: boolean;
    dateSelect: EventEmitter<CalendarSelectEvent>;
    viewChange: EventEmitter<CalendarViewChangeEvent>;
    monthChange: EventEmitter<Date>;
    yearChange: EventEmitter<number>;
    focus: EventEmitter<FocusEvent>;
    blur: EventEmitter<FocusEvent>;
    currentView: CalendarViewMode;
    currentDate: Date;
    selectedDates: Date[];
    calendarDays: CalendarDay[][];
    calendarMonths: CalendarMonth[];
    calendarYears: CalendarYear[];
    isOpen: boolean;
    isFocused: boolean;
    private _generatedId;
    private onChange;
    private onTouched;
    constructor(cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onDocumentClick(event: Event): void;
    get calendarId(): string;
    get mergedColors(): CalendarColors;
    get mergedConfig(): CalendarConfig;
    get mergedLocale(): CalendarLocale;
    get inputValue(): string;
    get inputClasses(): string;
    get labelClasses(): string;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private initializeCalendar;
    private updateSelectedDates;
    private generateCalendarDays;
    private createCalendarDay;
    private generateCalendarMonths;
    private generateCalendarYears;
    private isDateDisabled;
    private isMonthDisabled;
    private isYearDisabled;
    onInputClick(): void;
    onInputFocus(event: FocusEvent): void;
    onInputBlur(event: FocusEvent): void;
    onDayClick(day: CalendarDay): void;
    onMonthClick(month: CalendarMonth): void;
    onYearClick(year: CalendarYear): void;
    onTodayClick(): void;
    onClearClick(): void;
    onClearValue(event: MouseEvent): void;
    navigatePrevious(): void;
    navigateNext(): void;
    setView(view: CalendarViewMode): void;
    toggleCalendar(): void;
    closeCalendar(): void;
    private getDateFromInput;
    canNavigateToPreviousMonth(): boolean;
    canNavigateToNextMonth(): boolean;
    canNavigateToPreviousYear(): boolean;
    canNavigateToNextYear(): boolean;
    private selectDate;
    private handleMultiSelect;
    private handleRangeSelect;
    private updateValue;
    private isSameDay;
    private formatDate;
    getHeaderTitle(): string;
    getWeekdays(): string[];
    static ɵfac: i0.ɵɵFactoryDeclaration<SaCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SaCalendarComponent, "sa-calendar", never, { "size": { "alias": "size"; "required": false; }; "status": { "alias": "status"; "required": false; }; "label": { "alias": "label"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "helperText": { "alias": "helperText"; "required": false; }; "errorText": { "alias": "errorText"; "required": false; }; "required": { "alias": "required"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "minDate": { "alias": "minDate"; "required": false; }; "maxDate": { "alias": "maxDate"; "required": false; }; "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "colors": { "alias": "colors"; "required": false; }; "config": { "alias": "config"; "required": false; }; "validation": { "alias": "validation"; "required": false; }; "events": { "alias": "events"; "required": false; }; "inline": { "alias": "inline"; "required": false; }; "showInput": { "alias": "showInput"; "required": false; }; }, { "dateSelect": "dateSelect"; "viewChange": "viewChange"; "monthChange": "monthChange"; "yearChange": "yearChange"; "focus": "focus"; "blur": "blur"; }, never, never, false, never>;
}
